"use strict";

var SCHEDULER_MODE = require("../utils/constants").SCHEDULER_MODE;
var commons = require("../utils/commons");

/**
 * Creates new instance of Scheduler.
 *
 * @constructor
 */
function Scheduler () {
    this.events = [];
    this.mode = SCHEDULER_MODE.FULL_SPEED;
}

/**
 * Registers given object in the scheduler. Scheduler will be able to schedule events from that object emitted as events
 * "event". Events will be stored in the Scheduler sorted based on parameter "time" of the event data.
 *
 * @param {Object} eventEmitter Object inheriting from EventEmitter. Scheduler will add events generated by that object
 *                              emitted as event "event"
 */
Scheduler.prototype.registerEventEmitter = function (eventEmitter) {
    var self = this;

    eventEmitter.on("event", function (eventData) {
        self.events.push(eventData);

        self.events = self.events.sort(function (a, b) {
            return a.time < b.time ? -1 : 1;
        });
    });
};

/**
 * Takes the first event from the event list and executes it. Schedules its next execution, depending on current mode,
 * either immediately or with set time delay.
 *
 */
Scheduler.prototype.runEvent = function () {
    var event = this.events.shift();

    event.run();

    if (this.mode === SCHEDULER_MODE.FULL_SPEED) {
        setImmediate(commons.curry(this.runEvent, this));
    } else {
        setTimeout(commons.curry(this.runEvent, this), 1000);
    }
};

/**
 * Allows to change the mode of the scheduler - either full speed or with time delay.
 *
 * @param {Object} mode mode the scheduler should use
 */
Scheduler.prototype.switchMode = function (mode) {
    this.mode = mode;
};

module.exports = Scheduler;